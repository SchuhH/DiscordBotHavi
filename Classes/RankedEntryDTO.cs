// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RankedEntryDTO;
//
//    var rankedEntryDto = RankedEntryDto.FromJson(jsonString);

namespace DiscordBotHavi.Classes.RankedEntryDTO
{
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RankedEntryDto
    {
        [JsonProperty("queueType")]
        public string QueueType { get; set; }

        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }

        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }

        [JsonProperty("wins")]
        public long Wins { get; set; }

        [JsonProperty("veteran")]
        public bool Veteran { get; set; }

        [JsonProperty("losses")]
        public long Losses { get; set; }

        [JsonProperty("rank")]
        public string Rank { get; set; }

        [JsonProperty("tier")]
        public string Tier { get; set; }

        [JsonProperty("inactive")]
        public bool Inactive { get; set; }

        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }

        [JsonProperty("leagueId")]
        public Guid LeagueId { get; set; }

        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }

        [JsonProperty("leaguePoints")]
        public long LeaguePoints { get; set; }
    }

    public partial class RankedEntryDto
    {
        public static RankedEntryDto[] FromJson(string json) => JsonConvert.DeserializeObject<RankedEntryDto[]>(json, RankedEntryDTO.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RankedEntryDto[] self) => JsonConvert.SerializeObject(self, RankedEntryDTO.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

